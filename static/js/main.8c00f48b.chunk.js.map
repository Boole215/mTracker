{"version":3,"sources":["app/services/MangadexAPI.js","app/services/UtilityFunctions.js","assets/favicon.ico","app/features/card/cardSlice.js","app/features/addCard/addCardSlice.js","app/features/addDialogue/addDialogueSlice.js","app/store.js","app/features/addCard/addCard.js","app/features/addDialogue/addDialogue.js","app/features/chapterEntry/chapterEntry.js","app/features/card/card.js","app/features/cardGen/cardGen.js","app/features/loadingScreen/loadingScreen.js","app/features/updateChaptersButton/updateChaptersButton.js","app/App.js","serviceWorkerRegistration.js","index.js"],"names":["APP_CONFIG","instance","this","axiosInst","axios","create","baseURL","api","rateLimit","maxRPS","a","get","response","data","seriesId","coverId","getIdealFontSize","titleLength","calculatedValue","Math","min","max","fetchManga","BroadcastChannel","createAsyncThunk","MangadexAPI","fetchMangaById","mangaResponse","fetchChapter","chapterResponse","fetchCover","coverResponse","results","map","x","highlight","chapOne","updateChapterList","getState","state","currentSeriesLatestChapter","FeedCard","cards","mostRecentChapter","currentSeriesTitle","seriesTitle","updatedChapterList","retChapList","latestChapter","length","attributes","chapter","latestTitle","title","console","log","body","Notification","myIcon","chapterList","latest","feedCardSlice","createSlice","name","initialState","cardCount","loading","reducers","mouseInside","action","payload","showInfo","mouseOutside","mouseOverChapter","seriesID","chapters","chapterID","mouseNoLongerOverChapter","extraReducers","fulfilled","coverLoc","seriesDesc","titleSize","rejected","actions","addCardSlice","addingFeed","openAddDialogue","closeAddDialogue","addDialogueSlice","dialogueField","updateField","combineReducers","feedCardReducer","AddCard","addCardReducer","addDialogue","addDialogueReducer","persistConfig","key","storage","whitelist","persistedReducers","persistReducer","store","configureStore","reducer","useStyles","makeStyles","addPos","position","bottom","left","marginRight","marginBottom","dispatch","useDispatch","classes","IconButton","size","color","onClick","className","fontSize","font","fontFamily","addDia","top","padding","zIndex","exit","marginLeft","addButton","marginTop","AddDialogue","showThis","useSelector","currentValue","Fade","in","Paper","elevation","Typography","autoComplete","TextField","onChange","e","target","value","valueid","variant","label","Button","myListItem","paddingLeft","chapterEntry","myTypography","ChapterEntry","chapterTitle","chapterNum","iter","chapterKeys","isHighlighted","Link","underline","href","TypographyClasses","onMouseEnter","onMouseLeave","ListItem","ListItemText","primaryTypographyProps","secondaryTypographyProps","primary","secondary","root","width","height","maxWidth","maxHeight","objectFit","MuiButtonBase","disableRipple","media","minWidth","minHeight","blurImg","filter","paddingTop","paddingRight","myList","background","listHeader","id","crntTitle","imageURL","iterCount","innerClasses","dynamicTitle","innerFont","doBlur","Grid","item","xs","timeout","enter","Card","CardActionArea","gutterBottom","component","List","dense","disablePadding","subheader","ListSubheader","Object","keys","slice","CardMedia","image","CardGen","LoadingScreen","CircularProgress","updatePos","UpdateChaptersButton","currentSeriesIds","forEach","App","persistor","persistStore","Box","m","container","spacing","justify","alignItems","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","permission","requestPermission","alert"],"mappings":"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","file":"static/js/main.8c00f48b.chunk.js","sourcesContent":["import axios from \"axios\";\nimport rateLimit from \"axios-rate-limit\";\n// todo: move this to a config/appConfig.js\nconst APP_CONFIG = {\n  apiUrl: \"https://api.mangadex.org/\",\n};\n\nclass MangadexAPI {\n  constructor() {\n    this.axiosInst = axios.create({\n      baseURL: APP_CONFIG.apiUrl,\n    });\n    this.api = rateLimit(this.axiosInst, {\n      maxRPS: 5,\n    });\n  }\n\n  /**\n   * fetches all of the manga\n   * @returns {Promise<[]>}\n   */\n  async fetchAllManga() {\n    const response = await this.api.get(\"manga/\");\n    const { data } = response;\n\n    return data;\n  }\n\n  /**\n   * fetches a single manga by Id\n   * @param {string} seriesId\n   * @returns {Promise<Object>}\n   */\n  async fetchMangaById(seriesId) {\n    const response = await this.api.get(`manga/${seriesId}`);\n    const { data } = response;\n\n    return data;\n  }\n\n  /**\n   * fetches a manga's chapters using the manga's Id\n   * @param seriesId\n   * @returns {Promise<any>}\n   */\n  async fetchChapter(seriesId) {\n    const response = await this.api.get(\n      `manga/${seriesId}/feed?translatedLanguage[]=en&order[chapter]=desc`\n    );\n\n    return response.data;\n  }\n\n  /**\n   * fetches a cover by Id\n   * @param coverId\n   * @returns {Promise<any>}\n   */\n  async fetchCover(coverId) {\n    const response = await this.api.get(`cover/${coverId}`);\n\n    const { data } = response;\n\n    return data;\n  }\n}\n\nconst instance = new MangadexAPI();\n\nexport default instance;\n","/***\n * returns an ideal font size based titleLength\n * @param {number} titleLength\n * @returns {number}\n */\nfunction getIdealFontSize(titleLength) {\n  /* This uses Frieren's title as the basis for a min VH,\n   * and uses Kaguya's title as the basis for a max VH.\n   * The equation is essentially: 2 - ((InputLen) - (minLen)) * C\n   * where C is a constant\n   * The constant was found by plugging in Kaguya's len (58) as InputLen, and Frieren's len (17)\n   * as minLen\n   */\n  const calculatedValue = 2 - (titleLength - 17) * 0.00976;\n\n  return Math.min(Math.max(calculatedValue, 1.6), 2);\n}\n\nexport { getIdealFontSize };\n","export default __webpack_public_path__ + \"static/media/favicon.4fe75d5f.ico\";","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport MangadexAPI from \"../../services/MangadexAPI\";\nimport { getIdealFontSize } from \"../../services/UtilityFunctions\";\nimport myIcon from \"../../../assets/favicon.ico\";\n\n// TODO: Add conditionals for if the series has already added\n//       as in, only make the chapter and cover calls.\nconst broadcast = new BroadcastChannel(\"notification-channel\");\nexport const fetchManga = createAsyncThunk(\n  \"feedcard/fetchManga\",\n  async (seriesId) => {\n    let mangaResponse = await MangadexAPI.fetchMangaById(seriesId);\n    const chapterResponse = await MangadexAPI.fetchChapter(seriesId);\n\n    const coverResponse = await MangadexAPI.fetchCover(\n      mangaResponse[\"relationships\"][\"2\"][\"id\"]\n    );\n\n    mangaResponse[\"data\"][\n      \"coverURL\"\n    ] = `https://uploads.mangadex.org/covers/${mangaResponse[\"data\"][\"id\"]}/${coverResponse[\"data\"][\"attributes\"][\"fileName\"]}.512.jpg`;\n    mangaResponse[\"data\"][\"chapterList\"] = chapterResponse.results;\n    mangaResponse[\"data\"][\"chapterList\"] = mangaResponse[\"data\"][\n      \"chapterList\"\n    ].map((x) => ({\n      ...x,\n      highlight: false,\n    }));\n\n    // The following lines will be used for testing the update function\n    // They will remove the most recent entry, then move everything else up by one\n    const chapOne = mangaResponse[\"data\"][\"chapterList\"][\"1\"];\n    mangaResponse[\"data\"][\"chapterList\"][\"0\"] = chapOne;\n    //65163395-201c-4f5a-b303-706f32bf2df4\n    return mangaResponse;\n  }\n);\n\nexport const updateChapterList = createAsyncThunk(\n  \"feedcard/updateChapterList\",\n  async (seriesId, { getState }) => {\n    const state = getState();\n    const currentSeriesLatestChapter =\n      state.FeedCard.cards[seriesId].mostRecentChapter;\n\n    const currentSeriesTitle = state.FeedCard.cards[seriesId].seriesTitle;\n\n    const updatedChapterList = await MangadexAPI.fetchChapter(seriesId);\n    const retChapList = updatedChapterList.results.map((x) => ({\n      ...x,\n      highlight: false,\n    }));\n    // If the length of the list of chapters is non zero, then get the latest chapter's number\n    const latestChapter =\n      updatedChapterList.results.length !== 0\n        ? updatedChapterList.results[\"0\"].data.attributes.chapter\n        : null;\n    if (latestChapter != null) {\n      if (latestChapter !== currentSeriesLatestChapter) {\n        const latestTitle = retChapList[\"0\"].data.attributes.title;\n        console.log(\"Sending notification\");\n\n        const type = \"SEND_NOTIFICATION\";\n        const title = `New Chapter for ${currentSeriesTitle}!`;\n        const body = `Chapter ${latestChapter}, ${latestTitle}`;\n\n        const myNotif = new Notification(title, { body, myIcon });\n        console.log(\"Message sent\");\n      }\n    }\n    return {\n      seriesId: seriesId,\n      chapterList: retChapList,\n      latest: latestChapter,\n    };\n  }\n);\n\nexport const feedCardSlice = createSlice({\n  name: \"feedcard\",\n  initialState: {\n    /*\n        title:'placeholder',\n        chapters:[\n            \"something\"\n        ],\n        seriesID:\"0\",\n        showInfo:false,\n        */\n    cards: {},\n    cardCount: 0,\n    // notifications will essentially be used as a queue\n    loading: false,\n  },\n  reducers: {\n    // mouse actions receive the card's ID as the payload in order to determine\n    // which specific card to blur\n    mouseInside: (state, action) => {\n      state.cards[action.payload].showInfo = true;\n    },\n    mouseOutside: (state, action) => {\n      state.cards[action.payload].showInfo = false;\n    },\n\n    mouseOverChapter: (state, action) => {\n      state.cards[action.payload.seriesID].chapters[\n        action.payload.chapterID\n      ].highlight = true;\n    },\n    mouseNoLongerOverChapter: (state, action) => {\n      state.cards[action.payload.seriesID].chapters[\n        action.payload.chapterID\n      ].highlight = false;\n    },\n  },\n  extraReducers: {\n    [fetchManga.fulfilled]: (state, action) => {\n      // Pull things from action.payload to config\n      state.cards[action.payload[\"data\"][\"id\"]] = {\n        seriesTitle: action.payload[\"data\"][\"attributes\"][\"title\"][\"en\"],\n        coverLoc: action.payload[\"data\"][\"coverURL\"],\n        seriesDesc: action.payload[\"data\"][\"attributes\"][\"description\"][\"en\"],\n        chapters: action.payload[\"data\"][\"chapterList\"],\n        mostRecentChapter:\n          action.payload[\"data\"][\"chapterList\"].length !== 0\n            ? action.payload.data.chapterList[\"0\"].data.attributes.chapter\n            : null,\n        titleSize: getIdealFontSize(\n          action.payload[\"data\"][\"attributes\"][\"title\"][\"en\"].length\n        ),\n      };\n\n      state.cardCount += 1;\n    },\n    [fetchManga.rejected]: (state, action) => {\n      console.log(\"series failed\");\n      // TODO Do something here\n    },\n    [updateChapterList.fulfilled]: (state, action) => {\n      state.cards[action.payload.seriesId].chapters =\n        action.payload.chapterList;\n      state.cards[action.payload.seriesId].mostRecentChapter =\n        action.payload.latest;\n    },\n  },\n});\n\nexport const {\n  mouseInside,\n  mouseOutside,\n  mouseOverChapter,\n  mouseNoLongerOverChapter,\n} = feedCardSlice.actions;\n\nexport default feedCardSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nexport const addCardSlice = createSlice({\r\n    name: \"addCard\",\r\n    initialState: {\r\n        addingFeed: false,\r\n    },\r\n    reducers: {\r\n        // self explanatory setters, used by the add button and the add dialogue's\r\n        // exit button\r\n        openAddDialogue: (state) => {\r\n            state.addingFeed = true\r\n        },\r\n        closeAddDialogue: (state) => {\r\n            state.addingFeed = false\r\n        },\r\n    },\r\n\r\n})\r\n\r\nexport const { openAddDialogue, closeAddDialogue } = addCardSlice.actions\r\n\r\nexport default addCardSlice.reducer\r\n","import { createSlice } from \"@reduxjs/toolkit\";\nexport const addDialogueSlice = createSlice({\n  name: \"AddDialogue\",\n  initialState: {\n    dialogueField: \"\",\n  },\n  reducers: {\n    updateField: (state, action) => {\n      state.dialogueField = action.payload;\n    },\n    // pushes the submitted ID to be processed with API calls, and for an entry under 'cards'\n    // to be created for the data that will (/should) be received\n  },\n});\n\nexport const { updateField } = addDialogueSlice.actions;\n\nexport default addDialogueSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport feedCardReducer from \"./features/card/cardSlice\";\nimport addCardReducer from \"./features/addCard/addCardSlice\";\nimport addDialogueReducer from \"./features/addDialogue/addDialogueSlice\";\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst reducers = combineReducers({\n  FeedCard: feedCardReducer,\n  AddCard: addCardReducer,\n  addDialogue: addDialogueReducer,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"FeedCard\"],\n};\n\nconst persistedReducers = persistReducer(persistConfig, reducers);\n\nconst store = configureStore({\n  reducer: persistedReducers,\n});\n\nexport default store;\n\n/*\n * Because each component manages the state of itself\n * and of other instances of itself, my previous notion\n * of the way one might organize the state tree is likely\n * mistaken, assuming that we're going to be using initialState.\n * So the \"list\" representing our cards and their order will be under\n * FeedCard, so it should keep track of all of them\n */\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { openAddDialogue } from \"./addCardSlice\";\nimport AddCircleRoundedIcon from \"@material-ui/icons/AddCircleRounded\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst useStyles = makeStyles({\n  addPos: {\n    position: \"fixed\",\n    bottom: \"1vw\",\n    left: \"95vw\",\n    marginRight: 10,\n    marginBottom: 10,\n  },\n});\n\nexport function AddCard() {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const handleOpenAddDialogue = () => {\n    dispatch(openAddDialogue());\n  };\n\n  return (\n    <IconButton\n      size=\"medium\"\n      color=\"black\"\n      onClick={handleOpenAddDialogue}\n      className={classes.addPos}\n    >\n      <AddCircleRoundedIcon fontSize=\"large\" />\n    </IconButton>\n  );\n}\n","import React from \"react\";\n// Redux import\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateField } from \"./addDialogueSlice\";\nimport { closeAddDialogue } from \"../addCard/addCardSlice\";\nimport { fetchManga } from \"../card/cardSlice\";\n\n// material-ui imports\nimport {\n  Paper,\n  Typography,\n  TextField,\n  IconButton,\n  Button,\n  makeStyles,\n  Fade,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst useStyles = makeStyles({\n  font: {\n    fontFamily: \"Roboto\",\n    color: \"black\",\n  },\n  addDia: {\n    position: \"absolute\",\n    left: \"40vw\",\n    top: \"40vh\",\n    padding: 10,\n    zIndex: 4,\n  },\n  exit: {\n    position: \"absolute\",\n    marginLeft: \"80%\",\n    top: 0,\n  },\n  addButton: {\n    marginTop: \"2.5%\",\n  },\n});\n\nexport function AddDialogue() {\n  const dispatch = useDispatch();\n  const showThis = useSelector((state) => state.AddCard.addingFeed);\n  let currentValue = useSelector((state) => state.addDialogue.dialogueField);\n  const classes = useStyles();\n\n  // It seems like you need to dispatch reducers in an anonymous function in order\n  // to prevent them from being dispatched upon component rendering\n  const handleFetchManga = () => dispatch(fetchManga(currentValue));\n  const handleUpdateField = (e) => dispatch(updateField(e.target.value));\n\n  return (\n    <Fade in={showThis}>\n      <Paper elevation={12} className={classes.addDia}>\n        <IconButton\n          size=\"medium\"\n          onClick={() => {\n            dispatch(closeAddDialogue());\n          }}\n          className={classes.exit}\n        >\n          <CloseIcon fontSize=\"medium\" />\n        </IconButton>\n\n        <Typography className={classes.font}>\n          What is the series' ID?\n        </Typography>\n\n        <form autoComplete=\"off\">\n          <TextField\n            onChange={handleUpdateField}\n            valueid=\"inputID\"\n            variant=\"outlined\"\n            label=\"Series ID\"\n          />\n          <Button\n            variant=\"contained\"\n            onClick={handleFetchManga}\n            className={classes.addButton}\n          >\n            Add it!\n          </Button>\n        </form>\n      </Paper>\n    </Fade>\n  );\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, makeStyles, ListItemText, ListItem } from \"@material-ui/core\";\nimport { mouseOverChapter, mouseNoLongerOverChapter } from \"../card/cardSlice\";\n\nconst useStyles = makeStyles({\n  myListItem: {\n    paddingLeft: \"1.5vw\",\n    marginTop: \"-15px\",\n    marginBottom: \"0vh\",\n    marginRight: \"-1.25vw\",\n  },\n  chapterEntry: {\n    fontFamily: \"Roboto\",\n    fontSize: \"1.1vh\",\n    color: \"White\",\n  },\n  myTypography: {\n    fontSize: \".9vh\",\n    color: \"White\",\n    fontFamily: \"Roboto\",\n    \"&:hover\": {\n      color: \"#7393B3!important\",\n    },\n  },\n  highlight: {\n    color: \"#7393B3!important\",\n  },\n});\n// Link for each chapter looks like: https://mangadex.org/chapter/CHAPTERID/1\n// Where the number on the end is the page number\n\n/* Props passed to component are:\n * chapterTitle={chapters[key].data.attributes.title}\n * chapterNum={chapters[key].data.attributes.chapter}\n * chapterID={chapters[key].data.id}\n * seriesID={id}\n * iter={iterCount++}\n */\nexport function ChapterEntry({\n  chapterTitle,\n  chapterNum,\n  chapterID,\n  seriesID,\n  iter,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  // TODO: Rename chapterID used in chapter keys to localChapterID, as that's the ID that's used\n  //       within the object, not the actual identifying ID for the chapter in the API\n  const chapterKeys = { seriesID: seriesID, chapterID: iter };\n  const isHighlighted = useSelector(\n    (state) => state.FeedCard.cards[seriesID].chapters[iter].highlight\n  );\n  const handleHoveringChapter = () => {\n    dispatch(mouseOverChapter(chapterKeys));\n  };\n  const handleStoppedHoveringChapter = () => {\n    dispatch(mouseNoLongerOverChapter(chapterKeys));\n  };\n\n  return (\n    <Link\n      underline={\"None\"}\n      href={`https://mangadex.org/chapter/${chapterID}/1`}\n      TypographyClasses={classes.myTypography}\n      onMouseEnter={handleHoveringChapter}\n      onMouseLeave={handleStoppedHoveringChapter}\n    >\n      <ListItem className={classes.myListItem}>\n        <ListItemText\n          // If isHighlighted is true, then the highlight class is added to Typography styling\n          primaryTypographyProps={{\n            className: `${classes.myTypography} ${\n              isHighlighted ? classes.highlight : \"\"\n            }`,\n          }}\n          secondaryTypographyProps={{\n            className: `${classes.myTypography} ${\n              isHighlighted ? classes.highlight : \"\"\n            }`,\n          }}\n          primary={`Chapter ${chapterNum}`}\n          secondary={chapterTitle}\n        />\n      </ListItem>\n    </Link>\n  );\n}\n","import React from \"react\";\n// Redux import\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { mouseInside, mouseOutside } from \"./cardSlice\";\n\n// component import\nimport { ChapterEntry } from \"../chapterEntry/chapterEntry\";\n// asset import\n//import rotundCat from '../../assets/rotundCat.jpg'\n\n// material-ui imports\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {\n  Fade,\n  Grid,\n  CardMedia,\n  CardActionArea,\n  Typography,\n  List,\n  ListSubheader,\n  Card,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  // TODO: Figure out how to make then rectangular cards,\n  //       that are taller than they are wide. While\n  //       maintaining image scale (clipping is ok)\n\n  // TODO: Dynamically modify seriesTitle fontSize based on the length of the title, can probably use inline styling and a function for this\n  //       something like, styles={}\n\n  // For some reason setting a minWidth and a minHeight rather than width/heights made the cards become\n  // smaller as you added more. Like, first card is normal sized, second card is a bit smaller, third card is\n  // even smaller etc. Like a matryoshka doll.\n  root: {\n    position: \"relative\",\n    // maxWidth looks good at 345\n    //maxWidth: 345,\n    width: \"15vw\",\n    height: \"40vh\",\n    maxWidth: \"20vw\",\n    maxHeight: \"53.33vh\",\n    objectFit: \"fill\",\n    MuiButtonBase: { disableRipple: true },\n  },\n  media: {\n    //height: \"40vh\",\n    //width: \"15vw\",\n    minWidth: \"15vw\",\n    minHeight: \"40vh\",\n    maxWidth: \"20vw\",\n    maxHeight: \"53.33vh\",\n    objectFit: \"fill\",\n  },\n  blurImg: {\n    filter: \"blur(3px) brightness(50%)\",\n  },\n  seriesTitle: {\n    paddingLeft: \"3.25vw\",\n    paddingTop: \"4vh\",\n    paddingRight: \"2.5vw\",\n    position: \"absolute\",\n    fontSize: \"2vh\",\n    color: \"white\",\n    fontFamily: \"Roboto\",\n    zIndex: 1,\n  },\n  myList: {\n    zIndex: 1,\n    position: \"absolute\",\n    background: \"none\",\n    paddingTop: \"13vh\",\n    paddingLeft: \"3vw\",\n  },\n  listHeader: {\n    color: \"White\",\n    fontFamily: \"Roboto\",\n    fontSize: \"1.5vh\",\n  },\n});\n\n// add props to be access stuff\nexport function FeedCard({ id }) {\n  const dispatch = useDispatch();\n  const crntTitle = useSelector(\n    (state) => state.FeedCard.cards[id].seriesTitle\n  );\n  const imageURL = useSelector((state) => state.FeedCard.cards[id].coverLoc);\n  const titleSize = useSelector((state) => state.FeedCard.cards[id].titleSize);\n\n  const handleMouseEnter = () => dispatch(mouseInside(id));\n  const handleMouseExit = () => dispatch(mouseOutside(id));\n  /*const desc = useSelector(\n    (state) => state.FeedCard.cards[props.id].seriesDesc\n  );*/\n  let iterCount = 0;\n  const classes = useStyles();\n  const innerFont = makeStyles({\n    dynamicTitle: {\n      fontSize: `${titleSize}vh!important`,\n    },\n  });\n  const innerClasses = innerFont();\n\n  const doBlur = useSelector((state) =>\n    state.FeedCard.cards[id].showInfo ? classes.blurImg : null\n  );\n\n  const chapters = useSelector((state) => state.FeedCard.cards[id].chapters);\n\n  return (\n    <Grid item xs={2}>\n      <Fade in={true} timeout={{ enter: 600 }}>\n        <Card elevation={6} className={classes.root}>\n          <CardActionArea disableRipple>\n            <div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseExit}>\n              {doBlur ? (\n                // TODO: The Manga title and chapter list might look better if a Grid/GridItems are used rather than divs, look into this\n                <div>\n                  <Typography\n                    gutterBottom\n                    className={`${classes.seriesTitle} ${innerClasses.dynamicTitle}`}\n                    variant=\"h5\"\n                    component=\"h5\"\n                  >\n                    {crntTitle}\n                  </Typography>\n                  <List\n                    className={classes.myList}\n                    dense={true}\n                    disablePadding\n                    subheader={\n                      <ListSubheader\n                        component=\"div\"\n                        id=\"nested-list-subheader\"\n                        className={`${classes.listHeader} `}\n                      >\n                        Chapters\n                      </ListSubheader>\n                    }\n                  >\n                    {Object.keys(chapters)\n                      .slice(0, 5)\n                      .map((key) => (\n                        <ChapterEntry\n                          chapterTitle={chapters[key].data.attributes.title}\n                          chapterNum={chapters[key].data.attributes.chapter}\n                          chapterID={chapters[key].data.id}\n                          seriesID={id}\n                          iter={iterCount++}\n                        />\n                      ))}\n                  </List>\n                </div>\n              ) : null}\n              {/*<CardMedia component=\"img\" image={rotundCat} title=\"Large Cat\" className={`${classes.media} ${doBlur ? classes.blurImg : null}`}/>*/}\n              <CardMedia\n                component=\"img\"\n                image={imageURL}\n                title=\"Cover Image\"\n                className={`${classes.media} ${\n                  doBlur ? classes.blurImg : null\n                }`}\n              />\n            </div>\n          </CardActionArea>\n        </Card>\n      </Fade>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { FeedCard } from \"../card/card\";\nimport { useSelector } from \"react-redux\";\n\nexport function CardGen() {\n  const currentCards = Object.keys(\n    useSelector((state) => state.FeedCard.cards)\n  );\n  // This is moot since map won't generate anything if there's nothing in Cards\n  // const cardLen = useSelector((state) => state.FeedCard.cardCount);\n\n  return (\n    // If there's a nonzero amount of cards, then render them\n    currentCards.map((key) => <FeedCard id={key} />)\n  );\n}\n","import React from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst useStyles = makeStyles({\n  loading: {\n    position: \"absolute\",\n    left: \"45vw\",\n    top: \"45vh\",\n    padding: 10,\n    zIndex: 4,\n  },\n});\n\nexport function LoadingScreen() {\n  const classes = useStyles();\n  return <CircularProgress className={classes.loading} />;\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IconButton, makeStyles } from \"@material-ui/core\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport { updateChapterList } from \"../card/cardSlice\";\n\nconst useStyles = makeStyles({\n  updatePos: {\n    position: \"fixed\",\n    top: \"1vw\",\n    left: \"95vw\",\n    marginRight: 10,\n    marginTop: 10,\n  },\n});\n\nexport function UpdateChaptersButton() {\n  const dispatch = useDispatch();\n  const currentSeriesIds = Object.keys(\n    useSelector((state) => state.FeedCard.cards)\n  );\n  const classes = useStyles();\n  const handleUpdateChapters = () => {\n    currentSeriesIds.forEach((key) => dispatch(updateChapterList(key)));\n  };\n\n  return (\n    <IconButton\n      size=\"medium\"\n      color=\"black\"\n      className={classes.updatePos}\n      onClick={handleUpdateChapters}\n    >\n      <CachedIcon />\n    </IconButton>\n  );\n}\n","import \"../index.css\";\n\n// Core dependencies\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistStore } from \"redux-persist\";\nimport store from \"./store\";\n\n// Custom Components\nimport { AddCard } from \"./features/addCard/addCard\";\nimport { AddDialogue } from \"./features/addDialogue/addDialogue\";\nimport { CardGen } from \"./features/cardGen/cardGen\";\nimport { LoadingScreen } from \"./features/loadingScreen/loadingScreen\";\nimport { UpdateChaptersButton } from \"./features/updateChaptersButton/updateChaptersButton.js\";\n//import Notification from \"react-web-notification/src/components/Notification\";\n\n// Material UI\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport \"@fontsource/roboto\";\n\nfunction App() {\n  let persistor = persistStore(store);\n\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<LoadingScreen />} persistor={persistor}>\n        <AddDialogue />\n        <Box m={\"15px\"} height=\"100%\">\n          <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n            <CardGen />\n          </Grid>\n          <AddCard />\n          <UpdateChaptersButton />\n        </Box>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (\n    /*process.env.NODE_ENV === 'production' &&*/ \"serviceWorker\" in navigator\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n\nif (!(\"Notification\" in window)) {\n  alert(\"This Browser does not support desktop notifications\");\n} else if (Notification.permission === \"granted\") {\n  // do nothing\n} else {\n  Notification.requestPermission().then((permission) => {\n    console.log(\"Given the following permission\", permission);\n    if (permission !== \"granted\") {\n      alert(\n        \"Enable notifications if you'd like to be notified when a new chapter comes out!\"\n      );\n    }\n  });\n}\n"],"sourceRoot":""}